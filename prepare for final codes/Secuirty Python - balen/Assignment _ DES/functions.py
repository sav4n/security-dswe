# combined a few other files into this one
############################################################################################# 
#############################################################################################
#############################################################################################
def drop_parity(string):
    result = string
    for i in range(1,8):
        result = result[:i*7] + result[7*i+1:] # when downloaded from moodle, the 7 was 8
    return result[:-1]
#print(drop_parity("12345678901234567890123456789012345678901234567890123456789012345678901234"))
############################################################################################# 
#############################################################################################
#############################################################################################
def kxor(subkey, plaintext):
    k = ''
    for i in range(len(subkey)):
        if subkey[i] == plaintext[i]:
            k += '0'
        else:
            k += '1'
    return k


subkey = "010101010101010101010101010101010101010101010101"  # example 48-bit subkey
plaintext = "110011001100110011001100110011001100110011001100"  # example 48-bit plaintext

#print("Subkey     :", subkey)
#print("Plaintext  :", plaintext)
#print("CipherText :", kxor(subkey, plaintext))
#############################################################################################
#############################################################################################
############################################################################################
def divide_32_bits(string):
    return [string[0:32], string[32:64] ] 

#print(divide_32_bits("12345678901234567890123456789012345678901234567890123456789012345678901234"))
#############################################################################################
#############################################################################################
#############################################################################################
def straight_permutation(input_block, p_box):
    """Perform the straight permutation (P-box) on a 32-bit input block."""
  
    output_block = ''
    for i in p_box:
        output_block += input_block[i-1]
    return output_block



p_box = [
      16, 7, 20, 21, 29, 12, 28, 17,
      1, 15, 23, 26, 5, 18, 31, 10,
      2, 8, 24, 14, 32, 27, 3, 9,
      19, 13, 30, 6, 22, 11, 4, 25
  ]
input_block ='11010011001010010001100110100011'
output_block = straight_permutation(input_block,p_box)
#print(output_block)  # Output: '01111000001001010110000101001110'
#############################################################################################
#############################################################################################
#############################################################################################












